

这节课也比较简单

主要是讲 webpack抠法和 axios这个库抠的注意事项

webpack 实际上做了什么事情呢

以加载器为核心， 以加载器调用某一个模块为入口 (r(10))， 分模块打包，最终返回 n.exports，进行调用的一种打包工具
PS1: 加载器
function r(i) {
        if (e[i])
            return e[i].exports;
        var n = e[i] = {
            i: i,
            l: !1,
            exports: {}
        };
        return t[i].call(n.exports, n, n.exports, r),
        n.l = !0,
        n.exports
    }
PS2: 模块
webpack 的自执行函数里面，传入的参数
这个参数，可以是数组，可以是对象

PS3: 加载器的参数返回值是什么？

window.result = window.result + '"' + i + '":' + t[i]+'' + ','
从代码执行到函数入口开始 --r(12)-->r(0)--xxxxx--暂时在函数执行入口处下断--> 代码拿到秘文结束 --r(1)--r(2)--
暂时下断可能导致部分模块没有加载到，这时候需要向前下一个断点，在进行测试，直到模块不缺失并且能运行即可



最重要的一点：
    注意：webpack是一种打包工具，可以勉强理解为是一种壳。所以，webpack本身并不会影响到任何的混淆

    所以，webpack + 检测 + 混淆  是一种非常常见的组合手段

    我们之前讲过了 55题的打包原理，其实webpack的打包原理跟 55题非常像。接下来我用 三个版本的webpack去讲述webpack的打包原理


我不讲什么webpack自动化抠代码程序。我讲自动抠代码的原理

至于什么自动化抠代码成品，就是在原理上进行封装。封装你们自己去包装。是exe也好，插件也好，油猴脚本也好随便


自动扣的弊端
1、webpack 知识打包工具， 环境监测，浏览器指纹等各种信息收集都需要自己处理
2、投毒不易被发现
3、如果有反扒，他只是缩减了需要处理的内容，但是还是需要额外处理


axios 是一个非常出名的框架，除了jquery（10%）,剩下的要有 89%是它
https://unpkg.com/axios/dist/axios.min.js

const service = axios.create({
    baseURL: 'https://www.python-spider.com/api/combat?page=1&count=10',
    timeout: 5000,
    responseType: "json",
    withCredentials: true,
    headers: {
        "Content-Type": "application/json;charset=utf-8",
    }
})
service.interceptors.request.use(
    config => {
        if(config.method === "post") {
        } else {
            if (store.getters.token) {
                config.headers['X-Token'] = 'anlan:1698751:wq2s313sdre3'
            }
        }
        return config;
    },
    error => {
        Message({
            showClose: true,
            message: error,
            type: "warning"
        });
        return Promise.reject(error);
    }
)


这节课代码比较多，所以打了个压缩包上传到CDN了：

https://download.python-spider.com/10%E8%AF%BE%E4%BB%B6.zip
